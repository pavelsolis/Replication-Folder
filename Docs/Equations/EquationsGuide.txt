In Docs -> Settings -> macros.tex define variables and equations. The goal is to write each equation only once. That is why equations are *defined* in the macros.tex file because some equations need to be numbered, others don't and others are needed both with and without a number (e.g. numbered in the paper but not numbered in the slides).

Once equations are defined in the macros.tex file, create a .tex file for each one depending on its required use (numbered vs not numbered). All files starting with 'n' referred to numbered equations and those starting with 'u' to 'unnumbered' ones. The name of the file is the same as the name of the label (e.g. nEquationName with \label{eq:nEquationName}), this makes easier to reference equations later.

Equations are finally called in the main tex file (e.g. paper.tex, slides.tex) as follows: \input{../Equations/nEquationName}


\newcommand defines a new command, and makes an error if it is already defined.

\renewcommand redefines a predefined command, and makes an error if it is not yet defined.

\providecommand defines a new command if it isn't already defined.

They have all in common, that they define a new command, but the precondition and behavior differs a bit:

\renewcommand works only if the command is already defined: it's a redefinition

\newcommand doesn't work if the command is already defined: so it's a completely new definition

\providecommand works like \newcommand, but if the command is already defined, the (re)definition is ignored

\renewcommand and \newcommand would throw an error, if the condition is not fulfilled, to ensure clean programming, so you don't accidentally overwrite existing commands or try to redefine one which doesn't exist.

\providecommand may be helpful, if the same code would be used in several documents. If you would use it, you should be aware that it might have no effect. But using it you can avoid compile time errors.

If you really don't want error checking, you could use \def
If you want to define a command whether it is new or predefined, you can use \def